# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_hw_interface/RobotUpdateFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_hw_interface.msg

class RobotUpdateFeedback(genpy.Message):
  _md5sum = "292a14982b0b45b227a906cb2acd268c"
  _type = "robot_hw_interface/RobotUpdateFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
int32 status_percent
int32 cmd
MycobotAngles mycobot_angles
LinearActuatorPose la_pose
ToolUpdate tool_state

================================================================================
MSG: robot_hw_interface/MycobotAngles
float32 joint_1
float32 joint_2
float32 joint_3
float32 joint_4
float32 joint_5
float32 joint_6

int8 speed
================================================================================
MSG: robot_hw_interface/LinearActuatorPose
int32 targetPos
int32 speed
================================================================================
MSG: robot_hw_interface/ToolUpdate
WaterPump water_pump
ToiletBrush toilet_brush
================================================================================
MSG: robot_hw_interface/WaterPump
bool water_pump_status
int32 speed
================================================================================
MSG: robot_hw_interface/ToiletBrush
bool brush_lock_status
int32 motor_speed
"""
  __slots__ = ['status_percent','cmd','mycobot_angles','la_pose','tool_state']
  _slot_types = ['int32','int32','robot_hw_interface/MycobotAngles','robot_hw_interface/LinearActuatorPose','robot_hw_interface/ToolUpdate']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status_percent,cmd,mycobot_angles,la_pose,tool_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotUpdateFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status_percent is None:
        self.status_percent = 0
      if self.cmd is None:
        self.cmd = 0
      if self.mycobot_angles is None:
        self.mycobot_angles = robot_hw_interface.msg.MycobotAngles()
      if self.la_pose is None:
        self.la_pose = robot_hw_interface.msg.LinearActuatorPose()
      if self.tool_state is None:
        self.tool_state = robot_hw_interface.msg.ToolUpdate()
    else:
      self.status_percent = 0
      self.cmd = 0
      self.mycobot_angles = robot_hw_interface.msg.MycobotAngles()
      self.la_pose = robot_hw_interface.msg.LinearActuatorPose()
      self.tool_state = robot_hw_interface.msg.ToolUpdate()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i6fb2iBiBi().pack(_x.status_percent, _x.cmd, _x.mycobot_angles.joint_1, _x.mycobot_angles.joint_2, _x.mycobot_angles.joint_3, _x.mycobot_angles.joint_4, _x.mycobot_angles.joint_5, _x.mycobot_angles.joint_6, _x.mycobot_angles.speed, _x.la_pose.targetPos, _x.la_pose.speed, _x.tool_state.water_pump.water_pump_status, _x.tool_state.water_pump.speed, _x.tool_state.toilet_brush.brush_lock_status, _x.tool_state.toilet_brush.motor_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mycobot_angles is None:
        self.mycobot_angles = robot_hw_interface.msg.MycobotAngles()
      if self.la_pose is None:
        self.la_pose = robot_hw_interface.msg.LinearActuatorPose()
      if self.tool_state is None:
        self.tool_state = robot_hw_interface.msg.ToolUpdate()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.status_percent, _x.cmd, _x.mycobot_angles.joint_1, _x.mycobot_angles.joint_2, _x.mycobot_angles.joint_3, _x.mycobot_angles.joint_4, _x.mycobot_angles.joint_5, _x.mycobot_angles.joint_6, _x.mycobot_angles.speed, _x.la_pose.targetPos, _x.la_pose.speed, _x.tool_state.water_pump.water_pump_status, _x.tool_state.water_pump.speed, _x.tool_state.toilet_brush.brush_lock_status, _x.tool_state.toilet_brush.motor_speed,) = _get_struct_2i6fb2iBiBi().unpack(str[start:end])
      self.tool_state.water_pump.water_pump_status = bool(self.tool_state.water_pump.water_pump_status)
      self.tool_state.toilet_brush.brush_lock_status = bool(self.tool_state.toilet_brush.brush_lock_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i6fb2iBiBi().pack(_x.status_percent, _x.cmd, _x.mycobot_angles.joint_1, _x.mycobot_angles.joint_2, _x.mycobot_angles.joint_3, _x.mycobot_angles.joint_4, _x.mycobot_angles.joint_5, _x.mycobot_angles.joint_6, _x.mycobot_angles.speed, _x.la_pose.targetPos, _x.la_pose.speed, _x.tool_state.water_pump.water_pump_status, _x.tool_state.water_pump.speed, _x.tool_state.toilet_brush.brush_lock_status, _x.tool_state.toilet_brush.motor_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mycobot_angles is None:
        self.mycobot_angles = robot_hw_interface.msg.MycobotAngles()
      if self.la_pose is None:
        self.la_pose = robot_hw_interface.msg.LinearActuatorPose()
      if self.tool_state is None:
        self.tool_state = robot_hw_interface.msg.ToolUpdate()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.status_percent, _x.cmd, _x.mycobot_angles.joint_1, _x.mycobot_angles.joint_2, _x.mycobot_angles.joint_3, _x.mycobot_angles.joint_4, _x.mycobot_angles.joint_5, _x.mycobot_angles.joint_6, _x.mycobot_angles.speed, _x.la_pose.targetPos, _x.la_pose.speed, _x.tool_state.water_pump.water_pump_status, _x.tool_state.water_pump.speed, _x.tool_state.toilet_brush.brush_lock_status, _x.tool_state.toilet_brush.motor_speed,) = _get_struct_2i6fb2iBiBi().unpack(str[start:end])
      self.tool_state.water_pump.water_pump_status = bool(self.tool_state.water_pump.water_pump_status)
      self.tool_state.toilet_brush.brush_lock_status = bool(self.tool_state.toilet_brush.brush_lock_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i6fb2iBiBi = None
def _get_struct_2i6fb2iBiBi():
    global _struct_2i6fb2iBiBi
    if _struct_2i6fb2iBiBi is None:
        _struct_2i6fb2iBiBi = struct.Struct("<2i6fb2iBiBi")
    return _struct_2i6fb2iBiBi

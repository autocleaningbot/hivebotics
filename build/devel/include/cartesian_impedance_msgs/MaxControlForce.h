// Generated by gencpp from file cartesian_impedance_msgs/MaxControlForce.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCONTROLFORCE_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCONTROLFORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Wrench.h>
#include <cartesian_impedance_msgs/MaxCtrlForceExceeded.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct MaxControlForce_
{
  typedef MaxControlForce_<ContainerAllocator> Type;

  MaxControlForce_()
    : set()
    , exceeded_action()  {
    }
  MaxControlForce_(const ContainerAllocator& _alloc)
    : set(_alloc)
    , exceeded_action(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _set_type;
  _set_type set;

   typedef  ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator>  _exceeded_action_type;
  _exceeded_action_type exceeded_action;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> const> ConstPtr;

}; // struct MaxControlForce_

typedef ::cartesian_impedance_msgs::MaxControlForce_<std::allocator<void> > MaxControlForce;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxControlForce > MaxControlForcePtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxControlForce const> MaxControlForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator2> & rhs)
{
  return lhs.set == rhs.set &&
    lhs.exceeded_action == rhs.exceeded_action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d951f2d20cd888c5cd46241c4bebaba";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d951f2d20cd888cULL;
  static const uint64_t static_value2 = 0x5cd46241c4bebabaULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/MaxControlForce";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# parameters for Maximum allowed Cartesian Force when in Cartesian Impedance\n"
"# This is not the values that the user needs to set for Force Control on the controller\n"
"# these parameters are just a safety set and if the controller exceeds the maximum external force\n"
"# the user can provide different alternatives, e.g. stop the motion or move away the robot from the object.\n"
"\n"
"# Wrench is defined with two components:\n"
"# Vector3  force\n"
"# Vector3  torque\n"
"\n"
"# xyz: Newtons  (all >=0)\n"
"# rpy:Nm\n"
"geometry_msgs/Wrench set\n"
"\n"
"# handler if max control force is exceeded\n"
" MaxCtrlForceExceeded exceeded_action\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/MaxCtrlForceExceeded\n"
"# Message for handling different actions if the end-effector\n"
"# exceeds maximum force set in the Cartesian Impedance parameters\n"
"\n"
"bool stop\n"
"bool gravity_compensation\n"
"bool move_away\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set);
      stream.next(m.exceeded_action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaxControlForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::MaxControlForce_<ContainerAllocator>& v)
  {
    s << indent << "set: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.set);
    s << indent << "exceeded_action: ";
    s << std::endl;
    Printer< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >::stream(s, indent + "  ", v.exceeded_action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCONTROLFORCE_H

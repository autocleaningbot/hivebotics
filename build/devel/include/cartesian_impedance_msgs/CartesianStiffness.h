// Generated by gencpp from file cartesian_impedance_msgs/CartesianStiffness.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANSTIFFNESS_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANSTIFFNESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct CartesianStiffness_
{
  typedef CartesianStiffness_<ContainerAllocator> Type;

  CartesianStiffness_()
    : translational()
    , rotational()  {
    }
  CartesianStiffness_(const ContainerAllocator& _alloc)
    : translational(_alloc)
    , rotational(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _translational_type;
  _translational_type translational;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rotational_type;
  _rotational_type rotational;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianStiffness_

typedef ::cartesian_impedance_msgs::CartesianStiffness_<std::allocator<void> > CartesianStiffness;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianStiffness > CartesianStiffnessPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianStiffness const> CartesianStiffnessConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator2> & rhs)
{
  return lhs.translational == rhs.translational &&
    lhs.rotational == rhs.rotational;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "866c599e7e51951dfb12da14910fd482";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x866c599e7e51951dULL;
  static const uint64_t static_value2 = 0xfb12da14910fd482ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/CartesianStiffness";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Stiffness parameters for the Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Vector3\n"
"\n"
"# [N/m]\n"
"geometry_msgs/Vector3 translational\n"
"# [Nm/rad]\n"
"geometry_msgs/Vector3 rotational\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translational);
      stream.next(m.rotational);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianStiffness_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::CartesianStiffness_<ContainerAllocator>& v)
  {
    s << indent << "translational: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.translational);
    s << indent << "rotational: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rotational);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANSTIFFNESS_H

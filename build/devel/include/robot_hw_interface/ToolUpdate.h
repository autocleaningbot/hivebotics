// Generated by gencpp from file robot_hw_interface/ToolUpdate.msg
// DO NOT EDIT!


#ifndef ROBOT_HW_INTERFACE_MESSAGE_TOOLUPDATE_H
#define ROBOT_HW_INTERFACE_MESSAGE_TOOLUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_hw_interface/WaterPump.h>
#include <robot_hw_interface/ToiletBrush.h>

namespace robot_hw_interface
{
template <class ContainerAllocator>
struct ToolUpdate_
{
  typedef ToolUpdate_<ContainerAllocator> Type;

  ToolUpdate_()
    : water_pump()
    , toilet_brush()  {
    }
  ToolUpdate_(const ContainerAllocator& _alloc)
    : water_pump(_alloc)
    , toilet_brush(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_hw_interface::WaterPump_<ContainerAllocator>  _water_pump_type;
  _water_pump_type water_pump;

   typedef  ::robot_hw_interface::ToiletBrush_<ContainerAllocator>  _toilet_brush_type;
  _toilet_brush_type toilet_brush;





  typedef boost::shared_ptr< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct ToolUpdate_

typedef ::robot_hw_interface::ToolUpdate_<std::allocator<void> > ToolUpdate;

typedef boost::shared_ptr< ::robot_hw_interface::ToolUpdate > ToolUpdatePtr;
typedef boost::shared_ptr< ::robot_hw_interface::ToolUpdate const> ToolUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_hw_interface::ToolUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_hw_interface::ToolUpdate_<ContainerAllocator1> & lhs, const ::robot_hw_interface::ToolUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.water_pump == rhs.water_pump &&
    lhs.toilet_brush == rhs.toilet_brush;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_hw_interface::ToolUpdate_<ContainerAllocator1> & lhs, const ::robot_hw_interface::ToolUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d03c3706e095d719dab6e015f4f6e19";
  }

  static const char* value(const ::robot_hw_interface::ToolUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d03c3706e095d71ULL;
  static const uint64_t static_value2 = 0x9dab6e015f4f6e19ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_hw_interface/ToolUpdate";
  }

  static const char* value(const ::robot_hw_interface::ToolUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "WaterPump water_pump\n"
"ToiletBrush toilet_brush\n"
"================================================================================\n"
"MSG: robot_hw_interface/WaterPump\n"
"bool water_pump_status\n"
"int32 speed\n"
"================================================================================\n"
"MSG: robot_hw_interface/ToiletBrush\n"
"bool brush_lock_status\n"
"int32 motor_speed\n"
;
  }

  static const char* value(const ::robot_hw_interface::ToolUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.water_pump);
      stream.next(m.toilet_brush);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToolUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_hw_interface::ToolUpdate_<ContainerAllocator>& v)
  {
    s << indent << "water_pump: ";
    s << std::endl;
    Printer< ::robot_hw_interface::WaterPump_<ContainerAllocator> >::stream(s, indent + "  ", v.water_pump);
    s << indent << "toilet_brush: ";
    s << std::endl;
    Printer< ::robot_hw_interface::ToiletBrush_<ContainerAllocator> >::stream(s, indent + "  ", v.toilet_brush);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_HW_INTERFACE_MESSAGE_TOOLUPDATE_H

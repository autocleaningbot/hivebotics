// Generated by gencpp from file robot_hw_interface/WaterPump.msg
// DO NOT EDIT!


#ifndef ROBOT_HW_INTERFACE_MESSAGE_WATERPUMP_H
#define ROBOT_HW_INTERFACE_MESSAGE_WATERPUMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_hw_interface
{
template <class ContainerAllocator>
struct WaterPump_
{
  typedef WaterPump_<ContainerAllocator> Type;

  WaterPump_()
    : water_pump_status(false)
    , speed(0)  {
    }
  WaterPump_(const ContainerAllocator& _alloc)
    : water_pump_status(false)
    , speed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _water_pump_status_type;
  _water_pump_status_type water_pump_status;

   typedef int32_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::robot_hw_interface::WaterPump_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_hw_interface::WaterPump_<ContainerAllocator> const> ConstPtr;

}; // struct WaterPump_

typedef ::robot_hw_interface::WaterPump_<std::allocator<void> > WaterPump;

typedef boost::shared_ptr< ::robot_hw_interface::WaterPump > WaterPumpPtr;
typedef boost::shared_ptr< ::robot_hw_interface::WaterPump const> WaterPumpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_hw_interface::WaterPump_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_hw_interface::WaterPump_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_hw_interface::WaterPump_<ContainerAllocator1> & lhs, const ::robot_hw_interface::WaterPump_<ContainerAllocator2> & rhs)
{
  return lhs.water_pump_status == rhs.water_pump_status &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_hw_interface::WaterPump_<ContainerAllocator1> & lhs, const ::robot_hw_interface::WaterPump_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::WaterPump_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::WaterPump_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::WaterPump_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "447554c189b87b52f4dedae471bf506e";
  }

  static const char* value(const ::robot_hw_interface::WaterPump_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x447554c189b87b52ULL;
  static const uint64_t static_value2 = 0xf4dedae471bf506eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_hw_interface/WaterPump";
  }

  static const char* value(const ::robot_hw_interface::WaterPump_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool water_pump_status\n"
"int32 speed\n"
;
  }

  static const char* value(const ::robot_hw_interface::WaterPump_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.water_pump_status);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaterPump_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_hw_interface::WaterPump_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_hw_interface::WaterPump_<ContainerAllocator>& v)
  {
    s << indent << "water_pump_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.water_pump_status);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_HW_INTERFACE_MESSAGE_WATERPUMP_H

// Generated by gencpp from file cartesian_impedance_msgs/ConfigureCartesianImpedanceResponse.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCERESPONSE_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cartesian_impedance_msgs/CartesianImpedanceErrorCodes.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct ConfigureCartesianImpedanceResponse_
{
  typedef ConfigureCartesianImpedanceResponse_<ContainerAllocator> Type;

  ConfigureCartesianImpedanceResponse_()
    : success(false)
    , error()  {
    }
  ConfigureCartesianImpedanceResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator>  _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigureCartesianImpedanceResponse_

typedef ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<std::allocator<void> > ConfigureCartesianImpedanceResponse;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse > ConfigureCartesianImpedanceResponsePtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse const> ConfigureCartesianImpedanceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58590e7c12b7e2714ec28ce65a330fda";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58590e7c12b7e271ULL;
  static const uint64_t static_value2 = 0x4ec28ce65a330fdaULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/ConfigureCartesianImpedanceResponse";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"CartesianImpedanceErrorCodes error\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/CartesianImpedanceErrorCodes\n"
"# overall behavior\n"
"int32 SUCCESS=1\n"
"int32 FAILURE=99999\n"
"\n"
"int32 SET_STIFFNESS_FAILED=-1\n"
"int32 SET_DAMPING_FAILED=-2\n"
"int32 SET_MAX_CARTESIAN_VELOCITY_FAILED=-3\n"
"int32 SET_MAX_CONTROL_FORCE_FAILED=-4\n"
"int32 SET_MAX_PATH_DEVIATION=-5\n"
"int32 SET_NULL_SPACE_PARAMETERS_FAILED = -6\n"
"int32 SET_CARTESIAN_CONTROL_FAILED=-7\n"
"int32 TIMED_OUT=-8\n"
"int32 PREEMPTED=-9\n"
"\n"
"# these parameters are set for the load and center of gravity of the end-effector when we have tool attached to it\n"
"# It is important to set the right parameters for tool mass and center of gravity because in that way the robot can\n"
"# recalculate the torques necessary to be in gravity compensation or apply constant force when in force control\n"
"int32 NO_VALID_LOAD_DATA_SET=-10\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigureCartesianImpedanceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error: ";
    s << std::endl;
    Printer< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCERESPONSE_H

// Generated by gencpp from file cartesian_impedance_msgs/MaxCartesianVelocity.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCARTESIANVELOCITY_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCARTESIANVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct MaxCartesianVelocity_
{
  typedef MaxCartesianVelocity_<ContainerAllocator> Type;

  MaxCartesianVelocity_()
    : set()  {
    }
  MaxCartesianVelocity_(const ContainerAllocator& _alloc)
    : set(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _set_type;
  _set_type set;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct MaxCartesianVelocity_

typedef ::cartesian_impedance_msgs::MaxCartesianVelocity_<std::allocator<void> > MaxCartesianVelocity;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCartesianVelocity > MaxCartesianVelocityPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCartesianVelocity const> MaxCartesianVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.set == rhs.set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d6d020ac62f3de71dbfd1b4ad0a7689";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d6d020ac62f3de7ULL;
  static const uint64_t static_value2 = 0x1dbfd1b4ad0a7689ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/MaxCartesianVelocity";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# parameters for Maximum allowed Cartesian Velocity when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# the overall message is defined as Twist.\n"
"# The Twist message is composed of:\n"
"#  1. geometry_msgs/Vector3 linear\n"
"#  2. geometry_msgs/Vector3 angular\n"
"\n"
"# trans: [m/s]\n"
"# rotation: [rad/s]\n"
"geometry_msgs/Twist set\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaxCartesianVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::MaxCartesianVelocity_<ContainerAllocator>& v)
  {
    s << indent << "set: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCARTESIANVELOCITY_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_hw_interface/RobotUpdateAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import robot_hw_interface.msg
import std_msgs.msg

class RobotUpdateAction(genpy.Message):
  _md5sum = "6ff9ec0cd47d0f1358e9252241a0711f"
  _type = "robot_hw_interface/RobotUpdateAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

RobotUpdateActionGoal action_goal
RobotUpdateActionResult action_result
RobotUpdateActionFeedback action_feedback

================================================================================
MSG: robot_hw_interface/RobotUpdateActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
RobotUpdateGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: robot_hw_interface/RobotUpdateGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
# 
# The system has 2 types of commands 
# 1: arm_actuator_command 2: tool_command (water pump, solenoid valve, dc motor)

int32 cmd
MycobotAngles mycobot_angles
LinearActuatorPose la_pose
ToolUpdate tool_state

================================================================================
MSG: robot_hw_interface/MycobotAngles
float32 joint_1
float32 joint_2
float32 joint_3
float32 joint_4
float32 joint_5
float32 joint_6

int8 speed
================================================================================
MSG: robot_hw_interface/LinearActuatorPose
int32 targetPos
int32 speed
================================================================================
MSG: robot_hw_interface/ToolUpdate
WaterPump water_pump
ToiletBrush toilet_brush
================================================================================
MSG: robot_hw_interface/WaterPump
bool water_pump_status
int32 speed
================================================================================
MSG: robot_hw_interface/ToiletBrush
bool brush_lock_status
int32 motor_speed

================================================================================
MSG: robot_hw_interface/RobotUpdateActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
RobotUpdateResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: robot_hw_interface/RobotUpdateResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result

bool success
int32 cmd
MycobotAngles mycobot_angles
LinearActuatorPose la_pose
ToolUpdate tool_state

================================================================================
MSG: robot_hw_interface/RobotUpdateActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
RobotUpdateFeedback feedback

================================================================================
MSG: robot_hw_interface/RobotUpdateFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
int32 status_percent
int32 cmd
MycobotAngles mycobot_angles
LinearActuatorPose la_pose
ToolUpdate tool_state
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['robot_hw_interface/RobotUpdateActionGoal','robot_hw_interface/RobotUpdateActionResult','robot_hw_interface/RobotUpdateActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotUpdateAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = robot_hw_interface.msg.RobotUpdateActionGoal()
      if self.action_result is None:
        self.action_result = robot_hw_interface.msg.RobotUpdateActionResult()
      if self.action_feedback is None:
        self.action_feedback = robot_hw_interface.msg.RobotUpdateActionFeedback()
    else:
      self.action_goal = robot_hw_interface.msg.RobotUpdateActionGoal()
      self.action_result = robot_hw_interface.msg.RobotUpdateActionResult()
      self.action_feedback = robot_hw_interface.msg.RobotUpdateActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6fb2iBiBi3I().pack(_x.action_goal.goal.cmd, _x.action_goal.goal.mycobot_angles.joint_1, _x.action_goal.goal.mycobot_angles.joint_2, _x.action_goal.goal.mycobot_angles.joint_3, _x.action_goal.goal.mycobot_angles.joint_4, _x.action_goal.goal.mycobot_angles.joint_5, _x.action_goal.goal.mycobot_angles.joint_6, _x.action_goal.goal.mycobot_angles.speed, _x.action_goal.goal.la_pose.targetPos, _x.action_goal.goal.la_pose.speed, _x.action_goal.goal.tool_state.water_pump.water_pump_status, _x.action_goal.goal.tool_state.water_pump.speed, _x.action_goal.goal.tool_state.toilet_brush.brush_lock_status, _x.action_goal.goal.tool_state.toilet_brush.motor_speed, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi6fb2iBiBi3I().pack(_x.action_result.result.success, _x.action_result.result.cmd, _x.action_result.result.mycobot_angles.joint_1, _x.action_result.result.mycobot_angles.joint_2, _x.action_result.result.mycobot_angles.joint_3, _x.action_result.result.mycobot_angles.joint_4, _x.action_result.result.mycobot_angles.joint_5, _x.action_result.result.mycobot_angles.joint_6, _x.action_result.result.mycobot_angles.speed, _x.action_result.result.la_pose.targetPos, _x.action_result.result.la_pose.speed, _x.action_result.result.tool_state.water_pump.water_pump_status, _x.action_result.result.tool_state.water_pump.speed, _x.action_result.result.tool_state.toilet_brush.brush_lock_status, _x.action_result.result.tool_state.toilet_brush.motor_speed, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i6fb2iBiBi().pack(_x.action_feedback.feedback.status_percent, _x.action_feedback.feedback.cmd, _x.action_feedback.feedback.mycobot_angles.joint_1, _x.action_feedback.feedback.mycobot_angles.joint_2, _x.action_feedback.feedback.mycobot_angles.joint_3, _x.action_feedback.feedback.mycobot_angles.joint_4, _x.action_feedback.feedback.mycobot_angles.joint_5, _x.action_feedback.feedback.mycobot_angles.joint_6, _x.action_feedback.feedback.mycobot_angles.speed, _x.action_feedback.feedback.la_pose.targetPos, _x.action_feedback.feedback.la_pose.speed, _x.action_feedback.feedback.tool_state.water_pump.water_pump_status, _x.action_feedback.feedback.tool_state.water_pump.speed, _x.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status, _x.action_feedback.feedback.tool_state.toilet_brush.motor_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = robot_hw_interface.msg.RobotUpdateActionGoal()
      if self.action_result is None:
        self.action_result = robot_hw_interface.msg.RobotUpdateActionResult()
      if self.action_feedback is None:
        self.action_feedback = robot_hw_interface.msg.RobotUpdateActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.action_goal.goal.cmd, _x.action_goal.goal.mycobot_angles.joint_1, _x.action_goal.goal.mycobot_angles.joint_2, _x.action_goal.goal.mycobot_angles.joint_3, _x.action_goal.goal.mycobot_angles.joint_4, _x.action_goal.goal.mycobot_angles.joint_5, _x.action_goal.goal.mycobot_angles.joint_6, _x.action_goal.goal.mycobot_angles.speed, _x.action_goal.goal.la_pose.targetPos, _x.action_goal.goal.la_pose.speed, _x.action_goal.goal.tool_state.water_pump.water_pump_status, _x.action_goal.goal.tool_state.water_pump.speed, _x.action_goal.goal.tool_state.toilet_brush.brush_lock_status, _x.action_goal.goal.tool_state.toilet_brush.motor_speed, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_i6fb2iBiBi3I().unpack(str[start:end])
      self.action_goal.goal.tool_state.water_pump.water_pump_status = bool(self.action_goal.goal.tool_state.water_pump.water_pump_status)
      self.action_goal.goal.tool_state.toilet_brush.brush_lock_status = bool(self.action_goal.goal.tool_state.toilet_brush.brush_lock_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_result.result.success, _x.action_result.result.cmd, _x.action_result.result.mycobot_angles.joint_1, _x.action_result.result.mycobot_angles.joint_2, _x.action_result.result.mycobot_angles.joint_3, _x.action_result.result.mycobot_angles.joint_4, _x.action_result.result.mycobot_angles.joint_5, _x.action_result.result.mycobot_angles.joint_6, _x.action_result.result.mycobot_angles.speed, _x.action_result.result.la_pose.targetPos, _x.action_result.result.la_pose.speed, _x.action_result.result.tool_state.water_pump.water_pump_status, _x.action_result.result.tool_state.water_pump.speed, _x.action_result.result.tool_state.toilet_brush.brush_lock_status, _x.action_result.result.tool_state.toilet_brush.motor_speed, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_Bi6fb2iBiBi3I().unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      self.action_result.result.tool_state.water_pump.water_pump_status = bool(self.action_result.result.tool_state.water_pump.water_pump_status)
      self.action_result.result.tool_state.toilet_brush.brush_lock_status = bool(self.action_result.result.tool_state.toilet_brush.brush_lock_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.action_feedback.feedback.status_percent, _x.action_feedback.feedback.cmd, _x.action_feedback.feedback.mycobot_angles.joint_1, _x.action_feedback.feedback.mycobot_angles.joint_2, _x.action_feedback.feedback.mycobot_angles.joint_3, _x.action_feedback.feedback.mycobot_angles.joint_4, _x.action_feedback.feedback.mycobot_angles.joint_5, _x.action_feedback.feedback.mycobot_angles.joint_6, _x.action_feedback.feedback.mycobot_angles.speed, _x.action_feedback.feedback.la_pose.targetPos, _x.action_feedback.feedback.la_pose.speed, _x.action_feedback.feedback.tool_state.water_pump.water_pump_status, _x.action_feedback.feedback.tool_state.water_pump.speed, _x.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status, _x.action_feedback.feedback.tool_state.toilet_brush.motor_speed,) = _get_struct_2i6fb2iBiBi().unpack(str[start:end])
      self.action_feedback.feedback.tool_state.water_pump.water_pump_status = bool(self.action_feedback.feedback.tool_state.water_pump.water_pump_status)
      self.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status = bool(self.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6fb2iBiBi3I().pack(_x.action_goal.goal.cmd, _x.action_goal.goal.mycobot_angles.joint_1, _x.action_goal.goal.mycobot_angles.joint_2, _x.action_goal.goal.mycobot_angles.joint_3, _x.action_goal.goal.mycobot_angles.joint_4, _x.action_goal.goal.mycobot_angles.joint_5, _x.action_goal.goal.mycobot_angles.joint_6, _x.action_goal.goal.mycobot_angles.speed, _x.action_goal.goal.la_pose.targetPos, _x.action_goal.goal.la_pose.speed, _x.action_goal.goal.tool_state.water_pump.water_pump_status, _x.action_goal.goal.tool_state.water_pump.speed, _x.action_goal.goal.tool_state.toilet_brush.brush_lock_status, _x.action_goal.goal.tool_state.toilet_brush.motor_speed, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi6fb2iBiBi3I().pack(_x.action_result.result.success, _x.action_result.result.cmd, _x.action_result.result.mycobot_angles.joint_1, _x.action_result.result.mycobot_angles.joint_2, _x.action_result.result.mycobot_angles.joint_3, _x.action_result.result.mycobot_angles.joint_4, _x.action_result.result.mycobot_angles.joint_5, _x.action_result.result.mycobot_angles.joint_6, _x.action_result.result.mycobot_angles.speed, _x.action_result.result.la_pose.targetPos, _x.action_result.result.la_pose.speed, _x.action_result.result.tool_state.water_pump.water_pump_status, _x.action_result.result.tool_state.water_pump.speed, _x.action_result.result.tool_state.toilet_brush.brush_lock_status, _x.action_result.result.tool_state.toilet_brush.motor_speed, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i6fb2iBiBi().pack(_x.action_feedback.feedback.status_percent, _x.action_feedback.feedback.cmd, _x.action_feedback.feedback.mycobot_angles.joint_1, _x.action_feedback.feedback.mycobot_angles.joint_2, _x.action_feedback.feedback.mycobot_angles.joint_3, _x.action_feedback.feedback.mycobot_angles.joint_4, _x.action_feedback.feedback.mycobot_angles.joint_5, _x.action_feedback.feedback.mycobot_angles.joint_6, _x.action_feedback.feedback.mycobot_angles.speed, _x.action_feedback.feedback.la_pose.targetPos, _x.action_feedback.feedback.la_pose.speed, _x.action_feedback.feedback.tool_state.water_pump.water_pump_status, _x.action_feedback.feedback.tool_state.water_pump.speed, _x.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status, _x.action_feedback.feedback.tool_state.toilet_brush.motor_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = robot_hw_interface.msg.RobotUpdateActionGoal()
      if self.action_result is None:
        self.action_result = robot_hw_interface.msg.RobotUpdateActionResult()
      if self.action_feedback is None:
        self.action_feedback = robot_hw_interface.msg.RobotUpdateActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.action_goal.goal.cmd, _x.action_goal.goal.mycobot_angles.joint_1, _x.action_goal.goal.mycobot_angles.joint_2, _x.action_goal.goal.mycobot_angles.joint_3, _x.action_goal.goal.mycobot_angles.joint_4, _x.action_goal.goal.mycobot_angles.joint_5, _x.action_goal.goal.mycobot_angles.joint_6, _x.action_goal.goal.mycobot_angles.speed, _x.action_goal.goal.la_pose.targetPos, _x.action_goal.goal.la_pose.speed, _x.action_goal.goal.tool_state.water_pump.water_pump_status, _x.action_goal.goal.tool_state.water_pump.speed, _x.action_goal.goal.tool_state.toilet_brush.brush_lock_status, _x.action_goal.goal.tool_state.toilet_brush.motor_speed, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_i6fb2iBiBi3I().unpack(str[start:end])
      self.action_goal.goal.tool_state.water_pump.water_pump_status = bool(self.action_goal.goal.tool_state.water_pump.water_pump_status)
      self.action_goal.goal.tool_state.toilet_brush.brush_lock_status = bool(self.action_goal.goal.tool_state.toilet_brush.brush_lock_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_result.result.success, _x.action_result.result.cmd, _x.action_result.result.mycobot_angles.joint_1, _x.action_result.result.mycobot_angles.joint_2, _x.action_result.result.mycobot_angles.joint_3, _x.action_result.result.mycobot_angles.joint_4, _x.action_result.result.mycobot_angles.joint_5, _x.action_result.result.mycobot_angles.joint_6, _x.action_result.result.mycobot_angles.speed, _x.action_result.result.la_pose.targetPos, _x.action_result.result.la_pose.speed, _x.action_result.result.tool_state.water_pump.water_pump_status, _x.action_result.result.tool_state.water_pump.speed, _x.action_result.result.tool_state.toilet_brush.brush_lock_status, _x.action_result.result.tool_state.toilet_brush.motor_speed, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_Bi6fb2iBiBi3I().unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      self.action_result.result.tool_state.water_pump.water_pump_status = bool(self.action_result.result.tool_state.water_pump.water_pump_status)
      self.action_result.result.tool_state.toilet_brush.brush_lock_status = bool(self.action_result.result.tool_state.toilet_brush.brush_lock_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.action_feedback.feedback.status_percent, _x.action_feedback.feedback.cmd, _x.action_feedback.feedback.mycobot_angles.joint_1, _x.action_feedback.feedback.mycobot_angles.joint_2, _x.action_feedback.feedback.mycobot_angles.joint_3, _x.action_feedback.feedback.mycobot_angles.joint_4, _x.action_feedback.feedback.mycobot_angles.joint_5, _x.action_feedback.feedback.mycobot_angles.joint_6, _x.action_feedback.feedback.mycobot_angles.speed, _x.action_feedback.feedback.la_pose.targetPos, _x.action_feedback.feedback.la_pose.speed, _x.action_feedback.feedback.tool_state.water_pump.water_pump_status, _x.action_feedback.feedback.tool_state.water_pump.speed, _x.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status, _x.action_feedback.feedback.tool_state.toilet_brush.motor_speed,) = _get_struct_2i6fb2iBiBi().unpack(str[start:end])
      self.action_feedback.feedback.tool_state.water_pump.water_pump_status = bool(self.action_feedback.feedback.tool_state.water_pump.water_pump_status)
      self.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status = bool(self.action_feedback.feedback.tool_state.toilet_brush.brush_lock_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i6fb2iBiBi = None
def _get_struct_2i6fb2iBiBi():
    global _struct_2i6fb2iBiBi
    if _struct_2i6fb2iBiBi is None:
        _struct_2i6fb2iBiBi = struct.Struct("<2i6fb2iBiBi")
    return _struct_2i6fb2iBiBi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bi6fb2iBiBi3I = None
def _get_struct_Bi6fb2iBiBi3I():
    global _struct_Bi6fb2iBiBi3I
    if _struct_Bi6fb2iBiBi3I is None:
        _struct_Bi6fb2iBiBi3I = struct.Struct("<Bi6fb2iBiBi3I")
    return _struct_Bi6fb2iBiBi3I
_struct_i6fb2iBiBi3I = None
def _get_struct_i6fb2iBiBi3I():
    global _struct_i6fb2iBiBi3I
    if _struct_i6fb2iBiBi3I is None:
        _struct_i6fb2iBiBi3I = struct.Struct("<i6fb2iBiBi3I")
    return _struct_i6fb2iBiBi3I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cartesian_impedance_msgs/ConfigureCartesianImpedanceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cartesian_impedance_msgs.msg
import geometry_msgs.msg

class ConfigureCartesianImpedanceRequest(genpy.Message):
  _md5sum = "bc60ddd10957f3627f5007add8c8b09f"
  _type = "cartesian_impedance_msgs/ConfigureCartesianImpedanceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cartesian_impedance_msgs/SetCartesianImpedance cart_impedance_params

================================================================================
MSG: cartesian_impedance_msgs/SetCartesianImpedance
# Here we combine all the parameters message definitions into a single message
# that needs to be send to the controller in order to adjust the Cartesian Impedance Parameters

string                 tool
CartesianStiffness     stiffness
#use this if the damping parameters are defined as ratios (Lehr's damping ratio)
CartesianDamping       damping
MaxCartesianVelocity   max_cart_vel
MaxControlForce        max_ctrl_force
MaxPathDeviation       max_path_deviation
NullSpace              null_space_params

================================================================================
MSG: cartesian_impedance_msgs/CartesianStiffness
# Stiffness parameters for the Cartesian Impedance
# the values are divided into translational and rotational
# each of the translational and rotational components is defined as Vector3

# [N/m]
geometry_msgs/Vector3 translational
# [Nm/rad]
geometry_msgs/Vector3 rotational

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: cartesian_impedance_msgs/CartesianDamping
# Damping parameters for the Cartesian Impedance
# the values are divided into translational and rotational
# each of the translational and rotational components is defined as Vector3

# Spring damping (type: double)
# The spring damping determines the extent to which the virtual springs
# oscillate after deflection.
# For all degrees of freedom (without unit: Lehr’s damping ratio)

# [ratio:0.1-1.0]
geometry_msgs/Vector3 translational
# [ratio:0.1-1.0]
geometry_msgs/Vector3 rotational

================================================================================
MSG: cartesian_impedance_msgs/MaxCartesianVelocity
# parameters for Maximum allowed Cartesian Velocity when in Cartesian Impedance
# the values are divided into translational and rotational
# the overall message is defined as Twist.
# The Twist message is composed of:
#  1. geometry_msgs/Vector3 linear
#  2. geometry_msgs/Vector3 angular

# trans: [m/s]
# rotation: [rad/s]
geometry_msgs/Twist set

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: cartesian_impedance_msgs/MaxControlForce
# parameters for Maximum allowed Cartesian Force when in Cartesian Impedance
# This is not the values that the user needs to set for Force Control on the controller
# these parameters are just a safety set and if the controller exceeds the maximum external force
# the user can provide different alternatives, e.g. stop the motion or move away the robot from the object.

# Wrench is defined with two components:
# Vector3  force
# Vector3  torque

# xyz: Newtons  (all >=0)
# rpy:Nm
geometry_msgs/Wrench set

# handler if max control force is exceeded
 MaxCtrlForceExceeded exceeded_action

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: cartesian_impedance_msgs/MaxCtrlForceExceeded
# Message for handling different actions if the end-effector
# exceeds maximum force set in the Cartesian Impedance parameters

bool stop
bool gravity_compensation
bool move_away

================================================================================
MSG: cartesian_impedance_msgs/MaxPathDeviation
# parameters for Maximum allowed Path Deviation from goal when in Cartesian Impedance
# the values are divided into translational and rotational
# each of the translational and rotational components is defined as Vector3

# maximum deviation from set goal in m
geometry_msgs/Vector3 translation

# maximum deviation from set goal in radians
geometry_msgs/Vector3 rotation

================================================================================
MSG: cartesian_impedance_msgs/NullSpace
# parameters for a redundant joint of the robot when in Cartesian Impedance
# the values are divided into translational and rotational
# each of the translational and rotational components is defined as Float64

# Kinematically, the manipulator's null space describes the motions
# the arm can make that don't move the end effector, known shorthand as "self-motion";
# for a standard 7 DOF revolute RPRPRPR manipulator this is usually equivalent to moving the elbow.
# The range of self-motion for a manipulator is a mathematically well defined space.
# Khatib et al., 1987

string[] link_names

# [Nm/rad] must be => 0.0
float64[] stiffness

# without unit: Lehr’s damping ratio
# must be between 0.3-1.0 suggested is 0.7
float64[] damping
"""
  __slots__ = ['cart_impedance_params']
  _slot_types = ['cartesian_impedance_msgs/SetCartesianImpedance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cart_impedance_params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigureCartesianImpedanceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cart_impedance_params is None:
        self.cart_impedance_params = cartesian_impedance_msgs.msg.SetCartesianImpedance()
    else:
      self.cart_impedance_params = cartesian_impedance_msgs.msg.SetCartesianImpedance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cart_impedance_params.tool
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_24d3B6d().pack(_x.cart_impedance_params.stiffness.translational.x, _x.cart_impedance_params.stiffness.translational.y, _x.cart_impedance_params.stiffness.translational.z, _x.cart_impedance_params.stiffness.rotational.x, _x.cart_impedance_params.stiffness.rotational.y, _x.cart_impedance_params.stiffness.rotational.z, _x.cart_impedance_params.damping.translational.x, _x.cart_impedance_params.damping.translational.y, _x.cart_impedance_params.damping.translational.z, _x.cart_impedance_params.damping.rotational.x, _x.cart_impedance_params.damping.rotational.y, _x.cart_impedance_params.damping.rotational.z, _x.cart_impedance_params.max_cart_vel.set.linear.x, _x.cart_impedance_params.max_cart_vel.set.linear.y, _x.cart_impedance_params.max_cart_vel.set.linear.z, _x.cart_impedance_params.max_cart_vel.set.angular.x, _x.cart_impedance_params.max_cart_vel.set.angular.y, _x.cart_impedance_params.max_cart_vel.set.angular.z, _x.cart_impedance_params.max_ctrl_force.set.force.x, _x.cart_impedance_params.max_ctrl_force.set.force.y, _x.cart_impedance_params.max_ctrl_force.set.force.z, _x.cart_impedance_params.max_ctrl_force.set.torque.x, _x.cart_impedance_params.max_ctrl_force.set.torque.y, _x.cart_impedance_params.max_ctrl_force.set.torque.z, _x.cart_impedance_params.max_ctrl_force.exceeded_action.stop, _x.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation, _x.cart_impedance_params.max_ctrl_force.exceeded_action.move_away, _x.cart_impedance_params.max_path_deviation.translation.x, _x.cart_impedance_params.max_path_deviation.translation.y, _x.cart_impedance_params.max_path_deviation.translation.z, _x.cart_impedance_params.max_path_deviation.rotation.x, _x.cart_impedance_params.max_path_deviation.rotation.y, _x.cart_impedance_params.max_path_deviation.rotation.z))
      length = len(self.cart_impedance_params.null_space_params.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.cart_impedance_params.null_space_params.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.cart_impedance_params.null_space_params.stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cart_impedance_params.null_space_params.stiffness))
      length = len(self.cart_impedance_params.null_space_params.damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cart_impedance_params.null_space_params.damping))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cart_impedance_params is None:
        self.cart_impedance_params = cartesian_impedance_msgs.msg.SetCartesianImpedance()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cart_impedance_params.tool = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cart_impedance_params.tool = str[start:end]
      _x = self
      start = end
      end += 243
      (_x.cart_impedance_params.stiffness.translational.x, _x.cart_impedance_params.stiffness.translational.y, _x.cart_impedance_params.stiffness.translational.z, _x.cart_impedance_params.stiffness.rotational.x, _x.cart_impedance_params.stiffness.rotational.y, _x.cart_impedance_params.stiffness.rotational.z, _x.cart_impedance_params.damping.translational.x, _x.cart_impedance_params.damping.translational.y, _x.cart_impedance_params.damping.translational.z, _x.cart_impedance_params.damping.rotational.x, _x.cart_impedance_params.damping.rotational.y, _x.cart_impedance_params.damping.rotational.z, _x.cart_impedance_params.max_cart_vel.set.linear.x, _x.cart_impedance_params.max_cart_vel.set.linear.y, _x.cart_impedance_params.max_cart_vel.set.linear.z, _x.cart_impedance_params.max_cart_vel.set.angular.x, _x.cart_impedance_params.max_cart_vel.set.angular.y, _x.cart_impedance_params.max_cart_vel.set.angular.z, _x.cart_impedance_params.max_ctrl_force.set.force.x, _x.cart_impedance_params.max_ctrl_force.set.force.y, _x.cart_impedance_params.max_ctrl_force.set.force.z, _x.cart_impedance_params.max_ctrl_force.set.torque.x, _x.cart_impedance_params.max_ctrl_force.set.torque.y, _x.cart_impedance_params.max_ctrl_force.set.torque.z, _x.cart_impedance_params.max_ctrl_force.exceeded_action.stop, _x.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation, _x.cart_impedance_params.max_ctrl_force.exceeded_action.move_away, _x.cart_impedance_params.max_path_deviation.translation.x, _x.cart_impedance_params.max_path_deviation.translation.y, _x.cart_impedance_params.max_path_deviation.translation.z, _x.cart_impedance_params.max_path_deviation.rotation.x, _x.cart_impedance_params.max_path_deviation.rotation.y, _x.cart_impedance_params.max_path_deviation.rotation.z,) = _get_struct_24d3B6d().unpack(str[start:end])
      self.cart_impedance_params.max_ctrl_force.exceeded_action.stop = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.stop)
      self.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation)
      self.cart_impedance_params.max_ctrl_force.exceeded_action.move_away = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.move_away)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cart_impedance_params.null_space_params.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.cart_impedance_params.null_space_params.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cart_impedance_params.null_space_params.stiffness = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cart_impedance_params.null_space_params.damping = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cart_impedance_params.tool
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_24d3B6d().pack(_x.cart_impedance_params.stiffness.translational.x, _x.cart_impedance_params.stiffness.translational.y, _x.cart_impedance_params.stiffness.translational.z, _x.cart_impedance_params.stiffness.rotational.x, _x.cart_impedance_params.stiffness.rotational.y, _x.cart_impedance_params.stiffness.rotational.z, _x.cart_impedance_params.damping.translational.x, _x.cart_impedance_params.damping.translational.y, _x.cart_impedance_params.damping.translational.z, _x.cart_impedance_params.damping.rotational.x, _x.cart_impedance_params.damping.rotational.y, _x.cart_impedance_params.damping.rotational.z, _x.cart_impedance_params.max_cart_vel.set.linear.x, _x.cart_impedance_params.max_cart_vel.set.linear.y, _x.cart_impedance_params.max_cart_vel.set.linear.z, _x.cart_impedance_params.max_cart_vel.set.angular.x, _x.cart_impedance_params.max_cart_vel.set.angular.y, _x.cart_impedance_params.max_cart_vel.set.angular.z, _x.cart_impedance_params.max_ctrl_force.set.force.x, _x.cart_impedance_params.max_ctrl_force.set.force.y, _x.cart_impedance_params.max_ctrl_force.set.force.z, _x.cart_impedance_params.max_ctrl_force.set.torque.x, _x.cart_impedance_params.max_ctrl_force.set.torque.y, _x.cart_impedance_params.max_ctrl_force.set.torque.z, _x.cart_impedance_params.max_ctrl_force.exceeded_action.stop, _x.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation, _x.cart_impedance_params.max_ctrl_force.exceeded_action.move_away, _x.cart_impedance_params.max_path_deviation.translation.x, _x.cart_impedance_params.max_path_deviation.translation.y, _x.cart_impedance_params.max_path_deviation.translation.z, _x.cart_impedance_params.max_path_deviation.rotation.x, _x.cart_impedance_params.max_path_deviation.rotation.y, _x.cart_impedance_params.max_path_deviation.rotation.z))
      length = len(self.cart_impedance_params.null_space_params.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.cart_impedance_params.null_space_params.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.cart_impedance_params.null_space_params.stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cart_impedance_params.null_space_params.stiffness.tostring())
      length = len(self.cart_impedance_params.null_space_params.damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cart_impedance_params.null_space_params.damping.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cart_impedance_params is None:
        self.cart_impedance_params = cartesian_impedance_msgs.msg.SetCartesianImpedance()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cart_impedance_params.tool = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cart_impedance_params.tool = str[start:end]
      _x = self
      start = end
      end += 243
      (_x.cart_impedance_params.stiffness.translational.x, _x.cart_impedance_params.stiffness.translational.y, _x.cart_impedance_params.stiffness.translational.z, _x.cart_impedance_params.stiffness.rotational.x, _x.cart_impedance_params.stiffness.rotational.y, _x.cart_impedance_params.stiffness.rotational.z, _x.cart_impedance_params.damping.translational.x, _x.cart_impedance_params.damping.translational.y, _x.cart_impedance_params.damping.translational.z, _x.cart_impedance_params.damping.rotational.x, _x.cart_impedance_params.damping.rotational.y, _x.cart_impedance_params.damping.rotational.z, _x.cart_impedance_params.max_cart_vel.set.linear.x, _x.cart_impedance_params.max_cart_vel.set.linear.y, _x.cart_impedance_params.max_cart_vel.set.linear.z, _x.cart_impedance_params.max_cart_vel.set.angular.x, _x.cart_impedance_params.max_cart_vel.set.angular.y, _x.cart_impedance_params.max_cart_vel.set.angular.z, _x.cart_impedance_params.max_ctrl_force.set.force.x, _x.cart_impedance_params.max_ctrl_force.set.force.y, _x.cart_impedance_params.max_ctrl_force.set.force.z, _x.cart_impedance_params.max_ctrl_force.set.torque.x, _x.cart_impedance_params.max_ctrl_force.set.torque.y, _x.cart_impedance_params.max_ctrl_force.set.torque.z, _x.cart_impedance_params.max_ctrl_force.exceeded_action.stop, _x.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation, _x.cart_impedance_params.max_ctrl_force.exceeded_action.move_away, _x.cart_impedance_params.max_path_deviation.translation.x, _x.cart_impedance_params.max_path_deviation.translation.y, _x.cart_impedance_params.max_path_deviation.translation.z, _x.cart_impedance_params.max_path_deviation.rotation.x, _x.cart_impedance_params.max_path_deviation.rotation.y, _x.cart_impedance_params.max_path_deviation.rotation.z,) = _get_struct_24d3B6d().unpack(str[start:end])
      self.cart_impedance_params.max_ctrl_force.exceeded_action.stop = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.stop)
      self.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.gravity_compensation)
      self.cart_impedance_params.max_ctrl_force.exceeded_action.move_away = bool(self.cart_impedance_params.max_ctrl_force.exceeded_action.move_away)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cart_impedance_params.null_space_params.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.cart_impedance_params.null_space_params.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cart_impedance_params.null_space_params.stiffness = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cart_impedance_params.null_space_params.damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24d3B6d = None
def _get_struct_24d3B6d():
    global _struct_24d3B6d
    if _struct_24d3B6d is None:
        _struct_24d3B6d = struct.Struct("<24d3B6d")
    return _struct_24d3B6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cartesian_impedance_msgs/ConfigureCartesianImpedanceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cartesian_impedance_msgs.msg

class ConfigureCartesianImpedanceResponse(genpy.Message):
  _md5sum = "58590e7c12b7e2714ec28ce65a330fda"
  _type = "cartesian_impedance_msgs/ConfigureCartesianImpedanceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
CartesianImpedanceErrorCodes error


================================================================================
MSG: cartesian_impedance_msgs/CartesianImpedanceErrorCodes
# overall behavior
int32 SUCCESS=1
int32 FAILURE=99999

int32 SET_STIFFNESS_FAILED=-1
int32 SET_DAMPING_FAILED=-2
int32 SET_MAX_CARTESIAN_VELOCITY_FAILED=-3
int32 SET_MAX_CONTROL_FORCE_FAILED=-4
int32 SET_MAX_PATH_DEVIATION=-5
int32 SET_NULL_SPACE_PARAMETERS_FAILED = -6
int32 SET_CARTESIAN_CONTROL_FAILED=-7
int32 TIMED_OUT=-8
int32 PREEMPTED=-9

# these parameters are set for the load and center of gravity of the end-effector when we have tool attached to it
# It is important to set the right parameters for tool mass and center of gravity because in that way the robot can
# recalculate the torques necessary to be in gravity compensation or apply constant force when in force control
int32 NO_VALID_LOAD_DATA_SET=-10
"""
  __slots__ = ['success','error']
  _slot_types = ['bool','cartesian_impedance_msgs/CartesianImpedanceErrorCodes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigureCartesianImpedanceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.error is None:
        self.error = cartesian_impedance_msgs.msg.CartesianImpedanceErrorCodes()
    else:
      self.success = False
      self.error = cartesian_impedance_msgs.msg.CartesianImpedanceErrorCodes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.error is None:
        self.error = cartesian_impedance_msgs.msg.CartesianImpedanceErrorCodes()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.error is None:
        self.error = cartesian_impedance_msgs.msg.CartesianImpedanceErrorCodes()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ConfigureCartesianImpedance(object):
  _type          = 'cartesian_impedance_msgs/ConfigureCartesianImpedance'
  _md5sum = '31f5fc4d2c180546cc19c45ae4dc3939'
  _request_class  = ConfigureCartesianImpedanceRequest
  _response_class = ConfigureCartesianImpedanceResponse

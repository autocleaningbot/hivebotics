// Generated by gencpp from file cartesian_impedance_msgs/MaxPathDeviation.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXPATHDEVIATION_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXPATHDEVIATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct MaxPathDeviation_
{
  typedef MaxPathDeviation_<ContainerAllocator> Type;

  MaxPathDeviation_()
    : translation()
    , rotation()  {
    }
  MaxPathDeviation_(const ContainerAllocator& _alloc)
    : translation(_alloc)
    , rotation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _translation_type;
  _translation_type translation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> const> ConstPtr;

}; // struct MaxPathDeviation_

typedef ::cartesian_impedance_msgs::MaxPathDeviation_<std::allocator<void> > MaxPathDeviation;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxPathDeviation > MaxPathDeviationPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxPathDeviation const> MaxPathDeviationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator2> & rhs)
{
  return lhs.translation == rhs.translation &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41357283b9b8994fb9ee581a91f76c5e";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41357283b9b8994fULL;
  static const uint64_t static_value2 = 0xb9ee581a91f76c5eULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/MaxPathDeviation";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# parameters for Maximum allowed Path Deviation from goal when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Vector3\n"
"\n"
"# maximum deviation from set goal in m\n"
"geometry_msgs/Vector3 translation\n"
"\n"
"# maximum deviation from set goal in radians\n"
"geometry_msgs/Vector3 rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaxPathDeviation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::MaxPathDeviation_<ContainerAllocator>& v)
  {
    s << indent << "translation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXPATHDEVIATION_H

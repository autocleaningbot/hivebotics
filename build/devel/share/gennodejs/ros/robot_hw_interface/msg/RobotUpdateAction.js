// Auto-generated. Do not edit!

// (in-package robot_hw_interface.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let RobotUpdateActionGoal = require('./RobotUpdateActionGoal.js');
let RobotUpdateActionResult = require('./RobotUpdateActionResult.js');
let RobotUpdateActionFeedback = require('./RobotUpdateActionFeedback.js');

//-----------------------------------------------------------

class RobotUpdateAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new RobotUpdateActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new RobotUpdateActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new RobotUpdateActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RobotUpdateAction
    // Serialize message field [action_goal]
    bufferOffset = RobotUpdateActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = RobotUpdateActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = RobotUpdateActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RobotUpdateAction
    let len;
    let data = new RobotUpdateAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = RobotUpdateActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = RobotUpdateActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = RobotUpdateActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += RobotUpdateActionGoal.getMessageSize(object.action_goal);
    length += RobotUpdateActionResult.getMessageSize(object.action_result);
    length += RobotUpdateActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_hw_interface/RobotUpdateAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '6ff9ec0cd47d0f1358e9252241a0711f';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    RobotUpdateActionGoal action_goal
    RobotUpdateActionResult action_result
    RobotUpdateActionFeedback action_feedback
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    RobotUpdateGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Goal
    # 
    # The system has 2 types of commands 
    # 1: arm_actuator_command 2: tool_command (water pump, solenoid valve, dc motor)
    
    int32 cmd
    MycobotAngles mycobot_angles
    LinearActuatorPose la_pose
    ToolUpdate tool_state
    
    ================================================================================
    MSG: robot_hw_interface/MycobotAngles
    float32 joint_1
    float32 joint_2
    float32 joint_3
    float32 joint_4
    float32 joint_5
    float32 joint_6
    
    int8 speed
    ================================================================================
    MSG: robot_hw_interface/LinearActuatorPose
    int32 targetPos
    int32 speed
    ================================================================================
    MSG: robot_hw_interface/ToolUpdate
    WaterPump water_pump
    ToiletBrush toilet_brush
    ================================================================================
    MSG: robot_hw_interface/WaterPump
    bool water_pump_status
    int32 speed
    ================================================================================
    MSG: robot_hw_interface/ToiletBrush
    bool brush_lock_status
    int32 motor_speed
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    RobotUpdateResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Result
    
    bool success
    int32 cmd
    MycobotAngles mycobot_angles
    LinearActuatorPose la_pose
    ToolUpdate tool_state
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    RobotUpdateFeedback feedback
    
    ================================================================================
    MSG: robot_hw_interface/RobotUpdateFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback
    int32 status_percent
    int32 cmd
    MycobotAngles mycobot_angles
    LinearActuatorPose la_pose
    ToolUpdate tool_state
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RobotUpdateAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = RobotUpdateActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new RobotUpdateActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = RobotUpdateActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new RobotUpdateActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = RobotUpdateActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new RobotUpdateActionFeedback()
    }

    return resolved;
    }
};

module.exports = RobotUpdateAction;

// Generated by gencpp from file cartesian_impedance_msgs/CartesianImpedanceErrorCodes.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANIMPEDANCEERRORCODES_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANIMPEDANCEERRORCODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct CartesianImpedanceErrorCodes_
{
  typedef CartesianImpedanceErrorCodes_<ContainerAllocator> Type;

  CartesianImpedanceErrorCodes_()
    {
    }
  CartesianImpedanceErrorCodes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(SET_STIFFNESS_FAILED)
  #undef SET_STIFFNESS_FAILED
#endif
#if defined(_WIN32) && defined(SET_DAMPING_FAILED)
  #undef SET_DAMPING_FAILED
#endif
#if defined(_WIN32) && defined(SET_MAX_CARTESIAN_VELOCITY_FAILED)
  #undef SET_MAX_CARTESIAN_VELOCITY_FAILED
#endif
#if defined(_WIN32) && defined(SET_MAX_CONTROL_FORCE_FAILED)
  #undef SET_MAX_CONTROL_FORCE_FAILED
#endif
#if defined(_WIN32) && defined(SET_MAX_PATH_DEVIATION)
  #undef SET_MAX_PATH_DEVIATION
#endif
#if defined(_WIN32) && defined(SET_NULL_SPACE_PARAMETERS_FAILED)
  #undef SET_NULL_SPACE_PARAMETERS_FAILED
#endif
#if defined(_WIN32) && defined(SET_CARTESIAN_CONTROL_FAILED)
  #undef SET_CARTESIAN_CONTROL_FAILED
#endif
#if defined(_WIN32) && defined(TIMED_OUT)
  #undef TIMED_OUT
#endif
#if defined(_WIN32) && defined(PREEMPTED)
  #undef PREEMPTED
#endif
#if defined(_WIN32) && defined(NO_VALID_LOAD_DATA_SET)
  #undef NO_VALID_LOAD_DATA_SET
#endif

  enum {
    SUCCESS = 1,
    FAILURE = 99999,
    SET_STIFFNESS_FAILED = -1,
    SET_DAMPING_FAILED = -2,
    SET_MAX_CARTESIAN_VELOCITY_FAILED = -3,
    SET_MAX_CONTROL_FORCE_FAILED = -4,
    SET_MAX_PATH_DEVIATION = -5,
    SET_NULL_SPACE_PARAMETERS_FAILED = -6,
    SET_CARTESIAN_CONTROL_FAILED = -7,
    TIMED_OUT = -8,
    PREEMPTED = -9,
    NO_VALID_LOAD_DATA_SET = -10,
  };


  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianImpedanceErrorCodes_

typedef ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<std::allocator<void> > CartesianImpedanceErrorCodes;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes > CartesianImpedanceErrorCodesPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes const> CartesianImpedanceErrorCodesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebce641c819a67590ce717bdb7c4731b";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebce641c819a6759ULL;
  static const uint64_t static_value2 = 0x0ce717bdb7c4731bULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/CartesianImpedanceErrorCodes";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# overall behavior\n"
"int32 SUCCESS=1\n"
"int32 FAILURE=99999\n"
"\n"
"int32 SET_STIFFNESS_FAILED=-1\n"
"int32 SET_DAMPING_FAILED=-2\n"
"int32 SET_MAX_CARTESIAN_VELOCITY_FAILED=-3\n"
"int32 SET_MAX_CONTROL_FORCE_FAILED=-4\n"
"int32 SET_MAX_PATH_DEVIATION=-5\n"
"int32 SET_NULL_SPACE_PARAMETERS_FAILED = -6\n"
"int32 SET_CARTESIAN_CONTROL_FAILED=-7\n"
"int32 TIMED_OUT=-8\n"
"int32 PREEMPTED=-9\n"
"\n"
"# these parameters are set for the load and center of gravity of the end-effector when we have tool attached to it\n"
"# It is important to set the right parameters for tool mass and center of gravity because in that way the robot can\n"
"# recalculate the torques necessary to be in gravity compensation or apply constant force when in force control\n"
"int32 NO_VALID_LOAD_DATA_SET=-10\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianImpedanceErrorCodes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::cartesian_impedance_msgs::CartesianImpedanceErrorCodes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANIMPEDANCEERRORCODES_H

// Generated by gencpp from file cartesian_impedance_msgs/SetCartesianForceCtrl.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_SETCARTESIANFORCECTRL_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_SETCARTESIANFORCECTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct SetCartesianForceCtrl_
{
  typedef SetCartesianForceCtrl_<ContainerAllocator> Type;

  SetCartesianForceCtrl_()
    : DOF()
    , force(0.0)
    , stiffness(0.0)  {
    }
  SetCartesianForceCtrl_(const ContainerAllocator& _alloc)
    : DOF(_alloc)
    , force(0.0)
    , stiffness(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DOF_type;
  _DOF_type DOF;

   typedef double _force_type;
  _force_type force;

   typedef double _stiffness_type;
  _stiffness_type stiffness;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct SetCartesianForceCtrl_

typedef ::cartesian_impedance_msgs::SetCartesianForceCtrl_<std::allocator<void> > SetCartesianForceCtrl;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::SetCartesianForceCtrl > SetCartesianForceCtrlPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::SetCartesianForceCtrl const> SetCartesianForceCtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator2> & rhs)
{
  return lhs.DOF == rhs.DOF &&
    lhs.force == rhs.force &&
    lhs.stiffness == rhs.stiffness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4f7772e7871d1a624600d97bd177326";
  }

  static const char* value(const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4f7772e7871d1a6ULL;
  static const uint64_t static_value2 = 0x24600d97bd177326ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/SetCartesianForceCtrl";
  }

  static const char* value(const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#this is the axis we want the robot to exert constant force.\n"
"string DOF\n"
"#the amount of force that the end effector needs to apply in the selected DOF\n"
"float64 force\n"
"#set the stiffness of that DOF\n"
"float64 stiffness\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DOF);
      stream.next(m.force);
      stream.next(m.stiffness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCartesianForceCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::SetCartesianForceCtrl_<ContainerAllocator>& v)
  {
    s << indent << "DOF: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DOF);
    s << indent << "force: ";
    Printer<double>::stream(s, indent + "  ", v.force);
    s << indent << "stiffness: ";
    Printer<double>::stream(s, indent + "  ", v.stiffness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_SETCARTESIANFORCECTRL_H

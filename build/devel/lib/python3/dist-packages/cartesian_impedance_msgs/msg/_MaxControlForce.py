# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cartesian_impedance_msgs/MaxControlForce.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cartesian_impedance_msgs.msg
import geometry_msgs.msg

class MaxControlForce(genpy.Message):
  _md5sum = "8d951f2d20cd888c5cd46241c4bebaba"
  _type = "cartesian_impedance_msgs/MaxControlForce"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# parameters for Maximum allowed Cartesian Force when in Cartesian Impedance
# This is not the values that the user needs to set for Force Control on the controller
# these parameters are just a safety set and if the controller exceeds the maximum external force
# the user can provide different alternatives, e.g. stop the motion or move away the robot from the object.

# Wrench is defined with two components:
# Vector3  force
# Vector3  torque

# xyz: Newtons  (all >=0)
# rpy:Nm
geometry_msgs/Wrench set

# handler if max control force is exceeded
 MaxCtrlForceExceeded exceeded_action

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: cartesian_impedance_msgs/MaxCtrlForceExceeded
# Message for handling different actions if the end-effector
# exceeds maximum force set in the Cartesian Impedance parameters

bool stop
bool gravity_compensation
bool move_away
"""
  __slots__ = ['set','exceeded_action']
  _slot_types = ['geometry_msgs/Wrench','cartesian_impedance_msgs/MaxCtrlForceExceeded']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set,exceeded_action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MaxControlForce, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.set is None:
        self.set = geometry_msgs.msg.Wrench()
      if self.exceeded_action is None:
        self.exceeded_action = cartesian_impedance_msgs.msg.MaxCtrlForceExceeded()
    else:
      self.set = geometry_msgs.msg.Wrench()
      self.exceeded_action = cartesian_impedance_msgs.msg.MaxCtrlForceExceeded()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.set.force.x, _x.set.force.y, _x.set.force.z, _x.set.torque.x, _x.set.torque.y, _x.set.torque.z, _x.exceeded_action.stop, _x.exceeded_action.gravity_compensation, _x.exceeded_action.move_away))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.set is None:
        self.set = geometry_msgs.msg.Wrench()
      if self.exceeded_action is None:
        self.exceeded_action = cartesian_impedance_msgs.msg.MaxCtrlForceExceeded()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.set.force.x, _x.set.force.y, _x.set.force.z, _x.set.torque.x, _x.set.torque.y, _x.set.torque.z, _x.exceeded_action.stop, _x.exceeded_action.gravity_compensation, _x.exceeded_action.move_away,) = _get_struct_6d3B().unpack(str[start:end])
      self.exceeded_action.stop = bool(self.exceeded_action.stop)
      self.exceeded_action.gravity_compensation = bool(self.exceeded_action.gravity_compensation)
      self.exceeded_action.move_away = bool(self.exceeded_action.move_away)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.set.force.x, _x.set.force.y, _x.set.force.z, _x.set.torque.x, _x.set.torque.y, _x.set.torque.z, _x.exceeded_action.stop, _x.exceeded_action.gravity_compensation, _x.exceeded_action.move_away))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.set is None:
        self.set = geometry_msgs.msg.Wrench()
      if self.exceeded_action is None:
        self.exceeded_action = cartesian_impedance_msgs.msg.MaxCtrlForceExceeded()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.set.force.x, _x.set.force.y, _x.set.force.z, _x.set.torque.x, _x.set.torque.y, _x.set.torque.z, _x.exceeded_action.stop, _x.exceeded_action.gravity_compensation, _x.exceeded_action.move_away,) = _get_struct_6d3B().unpack(str[start:end])
      self.exceeded_action.stop = bool(self.exceeded_action.stop)
      self.exceeded_action.gravity_compensation = bool(self.exceeded_action.gravity_compensation)
      self.exceeded_action.move_away = bool(self.exceeded_action.move_away)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d3B = None
def _get_struct_6d3B():
    global _struct_6d3B
    if _struct_6d3B is None:
        _struct_6d3B = struct.Struct("<6d3B")
    return _struct_6d3B

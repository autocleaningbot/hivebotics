// Generated by gencpp from file abluo_control/abluoTelemetry.msg
// DO NOT EDIT!


#ifndef ABLUO_CONTROL_MESSAGE_ABLUOTELEMETRY_H
#define ABLUO_CONTROL_MESSAGE_ABLUOTELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abluo_control
{
template <class ContainerAllocator>
struct abluoTelemetry_
{
  typedef abluoTelemetry_<ContainerAllocator> Type;

  abluoTelemetry_()
    : lin_act_pos(0.0)
    , lin_act_vel(0.0)
    , joint_pos()
    , joint_vel()  {
      joint_pos.assign(0.0);

      joint_vel.assign(0.0);
  }
  abluoTelemetry_(const ContainerAllocator& _alloc)
    : lin_act_pos(0.0)
    , lin_act_vel(0.0)
    , joint_pos()
    , joint_vel()  {
  (void)_alloc;
      joint_pos.assign(0.0);

      joint_vel.assign(0.0);
  }



   typedef float _lin_act_pos_type;
  _lin_act_pos_type lin_act_pos;

   typedef float _lin_act_vel_type;
  _lin_act_vel_type lin_act_vel;

   typedef boost::array<float, 6>  _joint_pos_type;
  _joint_pos_type joint_pos;

   typedef boost::array<float, 6>  _joint_vel_type;
  _joint_vel_type joint_vel;





  typedef boost::shared_ptr< ::abluo_control::abluoTelemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abluo_control::abluoTelemetry_<ContainerAllocator> const> ConstPtr;

}; // struct abluoTelemetry_

typedef ::abluo_control::abluoTelemetry_<std::allocator<void> > abluoTelemetry;

typedef boost::shared_ptr< ::abluo_control::abluoTelemetry > abluoTelemetryPtr;
typedef boost::shared_ptr< ::abluo_control::abluoTelemetry const> abluoTelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abluo_control::abluoTelemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abluo_control::abluoTelemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abluo_control::abluoTelemetry_<ContainerAllocator1> & lhs, const ::abluo_control::abluoTelemetry_<ContainerAllocator2> & rhs)
{
  return lhs.lin_act_pos == rhs.lin_act_pos &&
    lhs.lin_act_vel == rhs.lin_act_vel &&
    lhs.joint_pos == rhs.joint_pos &&
    lhs.joint_vel == rhs.joint_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abluo_control::abluoTelemetry_<ContainerAllocator1> & lhs, const ::abluo_control::abluoTelemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abluo_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abluo_control::abluoTelemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abluo_control::abluoTelemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abluo_control::abluoTelemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be46fb345c061067c53d8d4d84c44a87";
  }

  static const char* value(const ::abluo_control::abluoTelemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe46fb345c061067ULL;
  static const uint64_t static_value2 = 0xc53d8d4d84c44a87ULL;
};

template<class ContainerAllocator>
struct DataType< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abluo_control/abluoTelemetry";
  }

  static const char* value(const ::abluo_control::abluoTelemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lin_act_pos #val\n"
"float32 lin_act_vel\n"
"float32[6] joint_pos #degrees\n"
"float32[6] joint_vel #deg/s\n"
"# time startSyncTime\n"
"# uint32 isrTicks # this would overflow if the robot is left on for 497 days straight at 100hz\n"
"# uint8 bufferHealth\n"
;
  }

  static const char* value(const ::abluo_control::abluoTelemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lin_act_pos);
      stream.next(m.lin_act_vel);
      stream.next(m.joint_pos);
      stream.next(m.joint_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct abluoTelemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abluo_control::abluoTelemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abluo_control::abluoTelemetry_<ContainerAllocator>& v)
  {
    s << indent << "lin_act_pos: ";
    Printer<float>::stream(s, indent + "  ", v.lin_act_pos);
    s << indent << "lin_act_vel: ";
    Printer<float>::stream(s, indent + "  ", v.lin_act_vel);
    s << indent << "joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.joint_pos.size(); ++i)
    {
      s << indent << "  joint_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_pos[i]);
    }
    s << indent << "joint_vel[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel.size(); ++i)
    {
      s << indent << "  joint_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABLUO_CONTROL_MESSAGE_ABLUOTELEMETRY_H

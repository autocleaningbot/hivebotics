// Generated by gencpp from file cartesian_impedance_msgs/ConfigureForceControlResponse.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGUREFORCECONTROLRESPONSE_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGUREFORCECONTROLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cartesian_impedance_msgs/CartesianForceCtrlErrorCodes.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct ConfigureForceControlResponse_
{
  typedef ConfigureForceControlResponse_<ContainerAllocator> Type;

  ConfigureForceControlResponse_()
    : success(false)
    , error()  {
    }
  ConfigureForceControlResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator>  _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigureForceControlResponse_

typedef ::cartesian_impedance_msgs::ConfigureForceControlResponse_<std::allocator<void> > ConfigureForceControlResponse;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureForceControlResponse > ConfigureForceControlResponsePtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureForceControlResponse const> ConfigureForceControlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7c9cad7cd84b46126e20e34f547cde8";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7c9cad7cd84b461ULL;
  static const uint64_t static_value2 = 0x26e20e34f547cde8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/ConfigureForceControlResponse";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"CartesianForceCtrlErrorCodes error\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/CartesianForceCtrlErrorCodes\n"
"# overall behavior\n"
"int32 SUCCESS=1\n"
"int32 FAILURE=99999\n"
"\n"
"int32 SET_DOF_FAILED=-1\n"
"int32 SET_CONTROL_FORCE_FAILED=-2\n"
"int32 SET_FORCE_STIFFNESS_FAILED=-3\n"
"int32 SET_CARTESIAN_CONTROL_FAILED=-4\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigureForceControlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::ConfigureForceControlResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error: ";
    s << std::endl;
    Printer< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGUREFORCECONTROLRESPONSE_H

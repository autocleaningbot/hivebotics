// Generated by gencpp from file cartesian_impedance_msgs/ConfigureCartesianImpedanceRequest.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCEREQUEST_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cartesian_impedance_msgs/SetCartesianImpedance.h>

namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct ConfigureCartesianImpedanceRequest_
{
  typedef ConfigureCartesianImpedanceRequest_<ContainerAllocator> Type;

  ConfigureCartesianImpedanceRequest_()
    : cart_impedance_params()  {
    }
  ConfigureCartesianImpedanceRequest_(const ContainerAllocator& _alloc)
    : cart_impedance_params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::cartesian_impedance_msgs::SetCartesianImpedance_<ContainerAllocator>  _cart_impedance_params_type;
  _cart_impedance_params_type cart_impedance_params;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigureCartesianImpedanceRequest_

typedef ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<std::allocator<void> > ConfigureCartesianImpedanceRequest;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest > ConfigureCartesianImpedanceRequestPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest const> ConfigureCartesianImpedanceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cart_impedance_params == rhs.cart_impedance_params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc60ddd10957f3627f5007add8c8b09f";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc60ddd10957f362ULL;
  static const uint64_t static_value2 = 0x7f5007add8c8b09fULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/ConfigureCartesianImpedanceRequest";
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/SetCartesianImpedance cart_impedance_params\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/SetCartesianImpedance\n"
"# Here we combine all the parameters message definitions into a single message\n"
"# that needs to be send to the controller in order to adjust the Cartesian Impedance Parameters\n"
"\n"
"string                 tool\n"
"CartesianStiffness     stiffness\n"
"#use this if the damping parameters are defined as ratios (Lehr's damping ratio)\n"
"CartesianDamping       damping\n"
"MaxCartesianVelocity   max_cart_vel\n"
"MaxControlForce        max_ctrl_force\n"
"MaxPathDeviation       max_path_deviation\n"
"NullSpace              null_space_params\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/CartesianStiffness\n"
"# Stiffness parameters for the Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Vector3\n"
"\n"
"# [N/m]\n"
"geometry_msgs/Vector3 translational\n"
"# [Nm/rad]\n"
"geometry_msgs/Vector3 rotational\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/CartesianDamping\n"
"# Damping parameters for the Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Vector3\n"
"\n"
"# Spring damping (type: double)\n"
"# The spring damping determines the extent to which the virtual springs\n"
"# oscillate after deflection.\n"
"# For all degrees of freedom (without unit: Lehrâ€™s damping ratio)\n"
"\n"
"# [ratio:0.1-1.0]\n"
"geometry_msgs/Vector3 translational\n"
"# [ratio:0.1-1.0]\n"
"geometry_msgs/Vector3 rotational\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/MaxCartesianVelocity\n"
"# parameters for Maximum allowed Cartesian Velocity when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# the overall message is defined as Twist.\n"
"# The Twist message is composed of:\n"
"#  1. geometry_msgs/Vector3 linear\n"
"#  2. geometry_msgs/Vector3 angular\n"
"\n"
"# trans: [m/s]\n"
"# rotation: [rad/s]\n"
"geometry_msgs/Twist set\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/MaxControlForce\n"
"# parameters for Maximum allowed Cartesian Force when in Cartesian Impedance\n"
"# This is not the values that the user needs to set for Force Control on the controller\n"
"# these parameters are just a safety set and if the controller exceeds the maximum external force\n"
"# the user can provide different alternatives, e.g. stop the motion or move away the robot from the object.\n"
"\n"
"# Wrench is defined with two components:\n"
"# Vector3  force\n"
"# Vector3  torque\n"
"\n"
"# xyz: Newtons  (all >=0)\n"
"# rpy:Nm\n"
"geometry_msgs/Wrench set\n"
"\n"
"# handler if max control force is exceeded\n"
" MaxCtrlForceExceeded exceeded_action\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/MaxCtrlForceExceeded\n"
"# Message for handling different actions if the end-effector\n"
"# exceeds maximum force set in the Cartesian Impedance parameters\n"
"\n"
"bool stop\n"
"bool gravity_compensation\n"
"bool move_away\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/MaxPathDeviation\n"
"# parameters for Maximum allowed Path Deviation from goal when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Vector3\n"
"\n"
"# maximum deviation from set goal in m\n"
"geometry_msgs/Vector3 translation\n"
"\n"
"# maximum deviation from set goal in radians\n"
"geometry_msgs/Vector3 rotation\n"
"\n"
"================================================================================\n"
"MSG: cartesian_impedance_msgs/NullSpace\n"
"# parameters for a redundant joint of the robot when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Float64\n"
"\n"
"# Kinematically, the manipulator's null space describes the motions\n"
"# the arm can make that don't move the end effector, known shorthand as \"self-motion\";\n"
"# for a standard 7 DOF revolute RPRPRPR manipulator this is usually equivalent to moving the elbow.\n"
"# The range of self-motion for a manipulator is a mathematically well defined space.\n"
"# Khatib et al., 1987\n"
"\n"
"string[] link_names\n"
"\n"
"# [Nm/rad] must be => 0.0\n"
"float64[] stiffness\n"
"\n"
"# without unit: Lehrâ€™s damping ratio\n"
"# must be between 0.3-1.0 suggested is 0.7\n"
"float64[] damping\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cart_impedance_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigureCartesianImpedanceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::ConfigureCartesianImpedanceRequest_<ContainerAllocator>& v)
  {
    s << indent << "cart_impedance_params: ";
    s << std::endl;
    Printer< ::cartesian_impedance_msgs::SetCartesianImpedance_<ContainerAllocator> >::stream(s, indent + "  ", v.cart_impedance_params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CONFIGURECARTESIANIMPEDANCEREQUEST_H

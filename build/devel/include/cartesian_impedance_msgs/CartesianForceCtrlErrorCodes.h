// Generated by gencpp from file cartesian_impedance_msgs/CartesianForceCtrlErrorCodes.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANFORCECTRLERRORCODES_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANFORCECTRLERRORCODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct CartesianForceCtrlErrorCodes_
{
  typedef CartesianForceCtrlErrorCodes_<ContainerAllocator> Type;

  CartesianForceCtrlErrorCodes_()
    {
    }
  CartesianForceCtrlErrorCodes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(SET_DOF_FAILED)
  #undef SET_DOF_FAILED
#endif
#if defined(_WIN32) && defined(SET_CONTROL_FORCE_FAILED)
  #undef SET_CONTROL_FORCE_FAILED
#endif
#if defined(_WIN32) && defined(SET_FORCE_STIFFNESS_FAILED)
  #undef SET_FORCE_STIFFNESS_FAILED
#endif
#if defined(_WIN32) && defined(SET_CARTESIAN_CONTROL_FAILED)
  #undef SET_CARTESIAN_CONTROL_FAILED
#endif

  enum {
    SUCCESS = 1,
    FAILURE = 99999,
    SET_DOF_FAILED = -1,
    SET_CONTROL_FORCE_FAILED = -2,
    SET_FORCE_STIFFNESS_FAILED = -3,
    SET_CARTESIAN_CONTROL_FAILED = -4,
  };


  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianForceCtrlErrorCodes_

typedef ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<std::allocator<void> > CartesianForceCtrlErrorCodes;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes > CartesianForceCtrlErrorCodesPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes const> CartesianForceCtrlErrorCodesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdde8ee10c2b3283bacb3975eed8bd74";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdde8ee10c2b3283ULL;
  static const uint64_t static_value2 = 0xbacb3975eed8bd74ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/CartesianForceCtrlErrorCodes";
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# overall behavior\n"
"int32 SUCCESS=1\n"
"int32 FAILURE=99999\n"
"\n"
"int32 SET_DOF_FAILED=-1\n"
"int32 SET_CONTROL_FORCE_FAILED=-2\n"
"int32 SET_FORCE_STIFFNESS_FAILED=-3\n"
"int32 SET_CARTESIAN_CONTROL_FAILED=-4\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianForceCtrlErrorCodes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::cartesian_impedance_msgs::CartesianForceCtrlErrorCodes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_CARTESIANFORCECTRLERRORCODES_H

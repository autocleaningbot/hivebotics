// Generated by gencpp from file cartesian_impedance_msgs/MaxCtrlForceExceeded.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCTRLFORCEEXCEEDED_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCTRLFORCEEXCEEDED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct MaxCtrlForceExceeded_
{
  typedef MaxCtrlForceExceeded_<ContainerAllocator> Type;

  MaxCtrlForceExceeded_()
    : stop(false)
    , gravity_compensation(false)
    , move_away(false)  {
    }
  MaxCtrlForceExceeded_(const ContainerAllocator& _alloc)
    : stop(false)
    , gravity_compensation(false)
    , move_away(false)  {
  (void)_alloc;
    }



   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef uint8_t _gravity_compensation_type;
  _gravity_compensation_type gravity_compensation;

   typedef uint8_t _move_away_type;
  _move_away_type move_away;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> const> ConstPtr;

}; // struct MaxCtrlForceExceeded_

typedef ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<std::allocator<void> > MaxCtrlForceExceeded;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCtrlForceExceeded > MaxCtrlForceExceededPtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::MaxCtrlForceExceeded const> MaxCtrlForceExceededConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator2> & rhs)
{
  return lhs.stop == rhs.stop &&
    lhs.gravity_compensation == rhs.gravity_compensation &&
    lhs.move_away == rhs.move_away;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6ac6c0e9102c9975ab762de235b8e60";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6ac6c0e9102c997ULL;
  static const uint64_t static_value2 = 0x5ab762de235b8e60ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/MaxCtrlForceExceeded";
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for handling different actions if the end-effector\n"
"# exceeds maximum force set in the Cartesian Impedance parameters\n"
"\n"
"bool stop\n"
"bool gravity_compensation\n"
"bool move_away\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stop);
      stream.next(m.gravity_compensation);
      stream.next(m.move_away);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaxCtrlForceExceeded_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::MaxCtrlForceExceeded_<ContainerAllocator>& v)
  {
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "gravity_compensation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gravity_compensation);
    s << indent << "move_away: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_away);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_MAXCTRLFORCEEXCEEDED_H

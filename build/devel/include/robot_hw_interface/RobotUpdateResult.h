// Generated by gencpp from file robot_hw_interface/RobotUpdateResult.msg
// DO NOT EDIT!


#ifndef ROBOT_HW_INTERFACE_MESSAGE_ROBOTUPDATERESULT_H
#define ROBOT_HW_INTERFACE_MESSAGE_ROBOTUPDATERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_hw_interface/MycobotAngles.h>
#include <robot_hw_interface/LinearActuatorPose.h>
#include <robot_hw_interface/ToolUpdate.h>

namespace robot_hw_interface
{
template <class ContainerAllocator>
struct RobotUpdateResult_
{
  typedef RobotUpdateResult_<ContainerAllocator> Type;

  RobotUpdateResult_()
    : success(false)
    , cmd(0)
    , mycobot_angles()
    , la_pose()
    , tool_state()  {
    }
  RobotUpdateResult_(const ContainerAllocator& _alloc)
    : success(false)
    , cmd(0)
    , mycobot_angles(_alloc)
    , la_pose(_alloc)
    , tool_state(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef  ::robot_hw_interface::MycobotAngles_<ContainerAllocator>  _mycobot_angles_type;
  _mycobot_angles_type mycobot_angles;

   typedef  ::robot_hw_interface::LinearActuatorPose_<ContainerAllocator>  _la_pose_type;
  _la_pose_type la_pose;

   typedef  ::robot_hw_interface::ToolUpdate_<ContainerAllocator>  _tool_state_type;
  _tool_state_type tool_state;





  typedef boost::shared_ptr< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> const> ConstPtr;

}; // struct RobotUpdateResult_

typedef ::robot_hw_interface::RobotUpdateResult_<std::allocator<void> > RobotUpdateResult;

typedef boost::shared_ptr< ::robot_hw_interface::RobotUpdateResult > RobotUpdateResultPtr;
typedef boost::shared_ptr< ::robot_hw_interface::RobotUpdateResult const> RobotUpdateResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator1> & lhs, const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.cmd == rhs.cmd &&
    lhs.mycobot_angles == rhs.mycobot_angles &&
    lhs.la_pose == rhs.la_pose &&
    lhs.tool_state == rhs.tool_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator1> & lhs, const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f2e8c2e7926b9221a89cee3cfa83346";
  }

  static const char* value(const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f2e8c2e7926b922ULL;
  static const uint64_t static_value2 = 0x1a89cee3cfa83346ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_hw_interface/RobotUpdateResult";
  }

  static const char* value(const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"\n"
"bool success\n"
"int32 cmd\n"
"MycobotAngles mycobot_angles\n"
"LinearActuatorPose la_pose\n"
"ToolUpdate tool_state\n"
"\n"
"================================================================================\n"
"MSG: robot_hw_interface/MycobotAngles\n"
"float32 joint_1\n"
"float32 joint_2\n"
"float32 joint_3\n"
"float32 joint_4\n"
"float32 joint_5\n"
"float32 joint_6\n"
"\n"
"int8 speed\n"
"================================================================================\n"
"MSG: robot_hw_interface/LinearActuatorPose\n"
"int32 targetPos\n"
"int32 speed\n"
"================================================================================\n"
"MSG: robot_hw_interface/ToolUpdate\n"
"WaterPump water_pump\n"
"ToiletBrush toilet_brush\n"
"================================================================================\n"
"MSG: robot_hw_interface/WaterPump\n"
"bool water_pump_status\n"
"int32 speed\n"
"================================================================================\n"
"MSG: robot_hw_interface/ToiletBrush\n"
"bool brush_lock_status\n"
"int32 motor_speed\n"
;
  }

  static const char* value(const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.cmd);
      stream.next(m.mycobot_angles);
      stream.next(m.la_pose);
      stream.next(m.tool_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotUpdateResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_hw_interface::RobotUpdateResult_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "mycobot_angles: ";
    s << std::endl;
    Printer< ::robot_hw_interface::MycobotAngles_<ContainerAllocator> >::stream(s, indent + "  ", v.mycobot_angles);
    s << indent << "la_pose: ";
    s << std::endl;
    Printer< ::robot_hw_interface::LinearActuatorPose_<ContainerAllocator> >::stream(s, indent + "  ", v.la_pose);
    s << indent << "tool_state: ";
    s << std::endl;
    Printer< ::robot_hw_interface::ToolUpdate_<ContainerAllocator> >::stream(s, indent + "  ", v.tool_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_HW_INTERFACE_MESSAGE_ROBOTUPDATERESULT_H

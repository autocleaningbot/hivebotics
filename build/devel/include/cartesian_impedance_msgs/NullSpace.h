// Generated by gencpp from file cartesian_impedance_msgs/NullSpace.msg
// DO NOT EDIT!


#ifndef CARTESIAN_IMPEDANCE_MSGS_MESSAGE_NULLSPACE_H
#define CARTESIAN_IMPEDANCE_MSGS_MESSAGE_NULLSPACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_impedance_msgs
{
template <class ContainerAllocator>
struct NullSpace_
{
  typedef NullSpace_<ContainerAllocator> Type;

  NullSpace_()
    : link_names()
    , stiffness()
    , damping()  {
    }
  NullSpace_(const ContainerAllocator& _alloc)
    : link_names(_alloc)
    , stiffness(_alloc)
    , damping(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _link_names_type;
  _link_names_type link_names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _stiffness_type;
  _stiffness_type stiffness;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _damping_type;
  _damping_type damping;





  typedef boost::shared_ptr< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> const> ConstPtr;

}; // struct NullSpace_

typedef ::cartesian_impedance_msgs::NullSpace_<std::allocator<void> > NullSpace;

typedef boost::shared_ptr< ::cartesian_impedance_msgs::NullSpace > NullSpacePtr;
typedef boost::shared_ptr< ::cartesian_impedance_msgs::NullSpace const> NullSpaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator2> & rhs)
{
  return lhs.link_names == rhs.link_names &&
    lhs.stiffness == rhs.stiffness &&
    lhs.damping == rhs.damping;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator1> & lhs, const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_impedance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09af4246cba0b182d004ca8ea38f9880";
  }

  static const char* value(const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09af4246cba0b182ULL;
  static const uint64_t static_value2 = 0xd004ca8ea38f9880ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_impedance_msgs/NullSpace";
  }

  static const char* value(const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# parameters for a redundant joint of the robot when in Cartesian Impedance\n"
"# the values are divided into translational and rotational\n"
"# each of the translational and rotational components is defined as Float64\n"
"\n"
"# Kinematically, the manipulator's null space describes the motions\n"
"# the arm can make that don't move the end effector, known shorthand as \"self-motion\";\n"
"# for a standard 7 DOF revolute RPRPRPR manipulator this is usually equivalent to moving the elbow.\n"
"# The range of self-motion for a manipulator is a mathematically well defined space.\n"
"# Khatib et al., 1987\n"
"\n"
"string[] link_names\n"
"\n"
"# [Nm/rad] must be => 0.0\n"
"float64[] stiffness\n"
"\n"
"# without unit: Lehrâ€™s damping ratio\n"
"# must be between 0.3-1.0 suggested is 0.7\n"
"float64[] damping\n"
;
  }

  static const char* value(const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.link_names);
      stream.next(m.stiffness);
      stream.next(m.damping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NullSpace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_impedance_msgs::NullSpace_<ContainerAllocator>& v)
  {
    s << indent << "link_names[]" << std::endl;
    for (size_t i = 0; i < v.link_names.size(); ++i)
    {
      s << indent << "  link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_names[i]);
    }
    s << indent << "stiffness[]" << std::endl;
    for (size_t i = 0; i < v.stiffness.size(); ++i)
    {
      s << indent << "  stiffness[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stiffness[i]);
    }
    s << indent << "damping[]" << std::endl;
    for (size_t i = 0; i < v.damping.size(); ++i)
    {
      s << indent << "  damping[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.damping[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_IMPEDANCE_MSGS_MESSAGE_NULLSPACE_H
